// Package makeload is a load generation library for testing. See the README
// for usage information.
package makeload

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"sync"
	"time"
)

// Requester is an interface to modify how requests are made to the remote
// service. If supplied to the LoadGenerator struct, it will be used.
// Alternatively, LoadGenerator already supplies its own implementation.
type Requester interface {
	// Code to run when HTTP request delivery is made.
	Deliver(*url.URL) error
	// add status and possibly payload comparison functions to determine success
}

// Stats emcompasses the statistics for the requests already made.
type Stats struct {
	// add delivery time metrics as well as mean concurrency and other useful
	// stats for testing
	mutex sync.Mutex

	// Count of successes up to this point.
	Successes uint
	// Count of failures up to this point.
	Failures uint
}

// BatteryProperties are the list of properties common to each load generator.
type BatteryProperties struct {
	connMutex sync.RWMutex
	connCount uint
	connTotal uint

	// Concurrency is the number of concurrent request processors to make at a
	// time.
	Concurrency uint
	// SimultaneousConnections is the number of connections to maintain open at
	// any given time.
	SimultaneousConnections uint
	// URL is the url to connect to,
	URL *url.URL
	// Ctx is a context which, if canceled, will stop load generation.
	Ctx context.Context
	// Stats is the statistics generated by already processed load generation.
	Stats Stats

	// Requester is the interface to HTTP requests.
	Requester
}

// Benchmarker is the main load generator struct for managing benchmarking.
// Call Spawn() on the result.
type Benchmarker struct {
	Properties *BatteryProperties
	Time       time.Duration
}

func NewBenchmarker(properties *BatteryProperties, duration time.Duration) *Benchmarker {
	return &Benchmarker{Properties: properties, Time: duration}
}

// Spawn launches the benchmarker. It will return an error if there was an
// error generating load. It does not error if there were issues making the
// individual HTTP requests. The Stats struct tracks the count of failures.
//
// To cancel load generation, cancel a passed context.
func (b *Benchmarker) Spawn() error {
	start := time.Now()
	return b.Properties.spawn(func(total uint) bool { return start.Add(b.Time).Before(time.Now()) })
}

// LoadGenerator is the main load generator struct for managing load
// generation. One would construct this struct, filling out the proper
// parameters, and then would run Spawn() on the struct to apply load.
type LoadGenerator struct {
	Properties       *BatteryProperties
	TotalConnections uint
}

func NewLoadGenerator(properties *BatteryProperties, total uint) *LoadGenerator {
	return &LoadGenerator{Properties: properties, TotalConnections: total}
}

// Spawn launches the load generator. It will return an error if there was an
// error generating load. It does not error if there were issues making the
// individual HTTP requests. The Stats struct tracks the count of failures.
//
// To cancel load generation, cancel a passed context.
func (lg *LoadGenerator) Spawn() error {
	return lg.Properties.spawn(func(total uint) bool { return lg.TotalConnections <= total })
}

func (p *BatteryProperties) spawn(cancelFunc func(uint) bool) error {
	wg := &sync.WaitGroup{}
	wg.Add(int(p.Concurrency))

	for i := uint(0); i < p.Concurrency; i++ {
		go makeRequests(wg, p, cancelFunc)
	}

	wg.Wait()
	return p.Ctx.Err()
}

// this function performs the actual request delivery. it is run in multiple goroutines.
func makeRequests(wg *sync.WaitGroup, properties *BatteryProperties, cancelFunc func(uint) bool) {
	defer func() {
		wg.Done()
	}()

	for {
		select {
		case <-properties.Ctx.Done():
			return
		default:
		}

		properties.connMutex.RLock()
		if properties.SimultaneousConnections <= properties.connCount {
			time.Sleep(10 * time.Millisecond) // make this tweakable
			continue
		}

		if cancelFunc(properties.connTotal) {
			properties.connMutex.RUnlock()
			return
		}
		properties.connMutex.RUnlock()

		properties.connMutex.Lock()
		properties.connCount++
		properties.connTotal++
		properties.connMutex.Unlock()

		err := properties.Deliver(properties.URL)

		properties.connMutex.Lock()
		properties.connCount--
		properties.connMutex.Unlock()

		properties.Stats.mutex.Lock()
		if err != nil {
			properties.Stats.Failures++
		} else {
			properties.Stats.Successes++
		}
		properties.Stats.mutex.Unlock()
	}
}

// Deliver satisfies the Requester interface and encompasses basic delivery of
// a HTTP GET request.
func (p *BatteryProperties) Deliver(u *url.URL) error {
	resp, err := http.Get(u.String())
	if err != nil {
		return err
	}

	if resp.StatusCode != 200 {
		return errors.New("Non-200 status code")
	}

	return nil
}
